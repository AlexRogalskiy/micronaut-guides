buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath group: 'io.micronaut.docs', name: 'micronaut-docs-asciidoc-extensions', version: '1.0.25'
    }
}

plugins {
    id 'groovy'
    id("org.asciidoctor.jvm.convert") version "3.3.0"
}

apply from: "gradle/asciidoc.gradle"
apply from: "gradle/guides.gradle"


repositories {
    mavenCentral()
    jcenter()
}

task cleanAsciidoctorFolder {
    doLast {
        File f = new File('src/docs/asciidoc')
        if (f.exists()) {
            f.deleteDir()
        }
    }
}
task copyImagesToDist(type: Copy) {
    from 'src/docs/images'
    into "${project.buildDir}/dist/images"
    include '*.png'
}
task copyHtmlToDist(type: Copy) {
    from "${project.buildDir}/docs/asciidoc"
    into "${project.buildDir}/dist"
    exclude 'common-*.html'
}
task createDist {
    dependsOn('copyImagesToDist')
    dependsOn('copyHtmlToDist')
    finalizedBy('generateTestScript')
}
clean.dependsOn('cleanAsciidoctorFolder')
build.dependsOn('asciidoctor')
asciidoctor.mustRunAfter('generateGuides')
build.dependsOn('generateGuides')
build.finalizedBy('createDist')

task generateTestScript {
    ext {
        excludeDirs = ['images']
        distDir = 'build/dist'
        stopIfFailure = false
    }
    doLast {
        File output = new File(distDir + "/test.sh")
        output.createNewFile()
        String bashScript = '''\
#!/usr/bin/env bash
set -e

FAILED_PROJECTS=()
EXIT_STATUS=0
'''
        new File(distDir).eachDir {dir ->
            if (!excludeDirs.contains(dir.name)) {
                println dir.name
                bashScript += """\

cd ${dir.name}
echo "-------------------------------------------------"
echo "Executing '${dir.name}' tests"
${dir.name.contains('gradle') ? './gradlew test' : './mvnw test' } || EXIT_STATUS=\$?
cd ..
"""
if (stopIfFailure) {
    bashScript += """\
if [ \$EXIT_STATUS -ne 0 ]; then
  echo "'${dir.name}' tests failed => exit \$EXIT_STATUS"
  exit \$EXIT_STATUS
fi
"""
} else {
    bashScript += """\
if [ \$EXIT_STATUS -ne 0 ]; then
  FAILED_PROJECTS=("\${FAILED_PROJECTS[@]}" ${dir.name})
  echo "'${dir.name}' tests failed => exit \$EXIT_STATUS"
fi
EXIT_STATUS=0
"""
}
            }

        }
if (!stopIfFailure) {
    bashScript += '''
if [ ${#FAILED_PROJECTS[@]} -ne 0 ]; then
  echo ""
  echo "-------------------------------------------------"
  echo "Projects with errors:"
  for p in `echo ${FAILED_PROJECTS[@]}`; do
    echo "  $p"
  done;
  echo "-------------------------------------------------"
  exit 1
else
  exit 0
fi

'''
}
        output.text = bashScript
        output.setExecutable(true)
    }
}