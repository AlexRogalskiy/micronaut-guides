import io.micronaut.guides.GenerateGuideZip
import io.micronaut.guides.GuideProjectGenerator
import io.micronaut.guides.IndexGenerator
import io.micronaut.guides.ThemeProcessor
import io.micronaut.guides.TestScriptGenerator

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'io.micronaut.docs:micronaut-docs-asciidoc-extensions:1.0.25'
    }
}

plugins {
    id 'groovy'
    id("org.asciidoctor.jvm.convert") version "3.3.2"
}

apply from: "gradle/asciidoc.gradle"

ext {
    templateFile = "$projectDir/assets/template.html"
    distFolder = "${buildDir}/dist"
    codeFolder = "${buildDir}/code"
    testFile = "${codeFolder}/test.sh"
    guidesFolder = "${projectDir}/guides"
    metadataConfigName = 'metadata.json'
}

repositories {
    mavenCentral()
    jcenter()
}

task cleanAsciidoctorFolder {
    group 'guides'
    description 'Cleans src/docs/asciidoc folder'
    doLast {
        File f = file('src/docs/asciidoc')
        if (f.exists()) {
            f.deleteDir()
        }
    }
}

task copyImagesToDist(type: Copy) {
    group 'guides'
    description 'Copies images from src/docs/images to build/dist/images folder'
    from 'src/docs/images'
    into "${distFolder}/images"
    include '**/*.png',
            '**/*.jpg',
            '**/*.svg',
            '**/*.gif'
}

task copyStylesheetsToDist(type: Copy) {
    group 'guides'
    description 'Copies CSS files from assets/stylesheets to build/dist folder'
    from 'assets/stylesheets'
    into distFolder
    include '*.css'
}

task copyJavaScriptToDist(type: Copy) {
    group 'guides'
    description 'Copies JS files from assets/js to build/dist folder'
    from 'assets/js'
    into distFolder
    include '*.js'
}

task copyHtmlToDist(type: Copy) {
    dependsOn('asciidoctor')
    group 'guides'
    description 'Copies HTML generated from Asciidoc from build/docs/asciidoc to build/dist'
    from "${buildDir}/docs/asciidoc"
    into distFolder
    exclude 'common-*.html'
}

task createDist {
    description 'Creates build/dist folder with static assets'
    dependsOn 'copyImagesToDist',
              'copyStylesheetsToDist',
              'copyJavaScriptToDist'
}

clean.dependsOn('cleanAsciidoctorFolder')
build.dependsOn('asciidoctor')

asciidoctor.dependsOn('generateCodeZip')
asciidoctor.finalizedBy('copyHtmlToDist')

tasks.register('generateSampleProjects') {task ->
    task.inputs.dir('src/docs/common')
    task.inputs.dir(guidesFolder)
    task.outputs.dir(codeFolder)
    task.description 'Generates guide applications at build/code'
    task.group 'guides'
    task.doLast {
        if (!file(buildDir).exists()) {
            file(buildDir).mkdir()
        }
        GuideProjectGenerator generator = new GuideProjectGenerator()
        generator.generate(file(guidesFolder), file(codeFolder), metadataConfigName, new File(projectDir, "src/docs/asciidoc"))
        generator.close()
    }
    finalizedBy(
            'generateTestScript',
            'generateGuidesIndex',
            'generateGuidesJsonMetadata',
            'themeGuides'
    )
}

tasks.register('generateTestScript') { task ->
    task.group 'guides'
    task.description 'Generates a test.sh to runs every guide test at build/code'
    task.outputs.file(testFile)
    task.inputs.dir(guidesFolder)
    task.ext {
        stopIfFailure = false
    }
    task.doLast {
        File guides = file(guidesFolder)
        File output = file(testFile)
        output.createNewFile()
        StringBuilder sout = new StringBuilder()
        StringBuilder serr = new StringBuilder()
        def proc = "git diff --name-only origin/master".execute()
        proc.consumeProcessOutput(sout, serr)
        proc.waitForOrKill(1000)
        String err = serr.toString()
        if (err) {
            logger.error(err)
        }
        String[] changedFiles = sout.toString().split("\n")
        boolean onlyImagesOrMarkdownOrAsciidocChanged = changedFiles.every {String str ->
            str.endsWith('adoc') ||
                    str.endsWith('md')   ||
                    str.endsWith('png')  ||
                    str.endsWith('jpeg') ||
                    str.endsWith('jpg')  ||
                    str.endsWith('svg')  ||
                    str.endsWith('gif')
        }
        output.text = onlyImagesOrMarkdownOrAsciidocChanged  ? TestScriptGenerator.emptyScript() : TestScriptGenerator.generateScript(guides, metadataConfigName, stopIfFailure, changedFiles)
        output.setExecutable(true)
    }
}

tasks.register('generateCodeZip') { task ->
    task.group 'guides'
    task.description 'Generates a ZIP file for each application at build/code into build/dist'
    task.dependsOn 'generateSampleProjects'
    task.dependsOn 'createDist'
    task.inputs.dir(codeFolder)
    task.outputs.dir(distFolder)
    task.doLast {
        file(codeFolder).eachDir { dir ->
            String filename = projectDir.absolutePath + "/build/dist" + dir.absolutePath.substring(dir.absolutePath.lastIndexOf('/')) + ".zip"
            GenerateGuideZip.compressZipfile(dir.absolutePath, filename)
        }
    }
    task.mustRunAfter('generateTestScript')
}

tasks.register('generateGuidesIndex') {task ->
    task.group 'guides'
    task.description 'Generates an index.html with all the guides'
    task.inputs.file(templateFile)
    task.inputs.dir(guidesFolder)
    task.outputs.file("${distFolder}/index.html")
    task.doLast {
        File template = file(templateFile)
        File guides = file(guidesFolder)
        IndexGenerator.generateGuidesIndex(template, guides, project.buildDir, metadataConfigName)
    }
}

tasks.register('generateGuidesJsonMetadata') {task ->
    task.group 'guides'
    task.description 'Generates a guides.json with the metadata for all the guides'
    task.inputs.dir(guidesFolder)
    task.outputs.file("$distFolder/guides.json")
    task.doLast {
        File guides = file(guidesFolder)
        File output = file("$distFolder/guides.json")
        output.createNewFile()
        output.text = IndexGenerator.generateGuidesJsonIndex(guides, metadataConfigName)
    }
}

tasks.register('themeGuides') { task ->
    task.group 'guides'
    task.description 'Generates an index.html with all the guides'
    task.inputs.file(templateFile)
    task.inputs.dir(guidesFolder)
    task.outputs.dir(distFolder)
    task.doLast {
        File template = file(templateFile)
        File guides = file(guidesFolder)
        File dist = file(distFolder)
        ThemeProcessor.applyThemes(template, dist, guides, metadataConfigName)
    }
    task.mustRunAfter('copyHtmlToDist')
}
